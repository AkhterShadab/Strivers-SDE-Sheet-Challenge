

class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // Your code here
        jobComp jc=new jobComp();
        Arrays.sort(arr,(a,b)->b.profit-a.profit);
        int maxProfit=0;
        int count=0;
        int maxDeadline=0;
        for(int i=0;i<n;i++)
        {
            maxDeadline=Math.max(maxDeadline,arr[i].deadline);
        }
        int aux[]=new int[maxDeadline+1];
        // Arrays.fill(aux,-1);
        for(int i=0;i<n;i++)
        {
            for(int j=arr[i].deadline;j>0;j--)
            {
                if(aux[j]==0)
                {
                    maxProfit+=arr[i].profit;
                    count++;
                    aux[j]=1;
                    break;
                }    
            }
            
        }
        int temp[]=new int[2];
        temp[0]=count;
        temp[1]=maxProfit;
        return temp;
    }
}

// class Job {
//     int id, profit, deadline;
//     Job(int x, int y, int z){
//         this.id = x;
//         this.deadline = y;
//         this.profit = z; 
//     }
// }

class jobComp implements Comparator<Job>
{
    @Override
    public int compare(Job a, Job b)
    {
        if(a.profit<b.profit)return -1;
        else if(a.profit>b.profit) return 1;
        else if(a.id<b.id) return -1;
        return 1;
    }
}
