IN PLace Sorting - 

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1==null) return l2;
        if(l2==null) return l1;
        if(l1.val>l2.val)
        {
            ListNode temp=l1;
            l1=l2;
            l2=temp;
        }
        ListNode res=l1;
        while(l1!=null && l2!=null)
        {
            ListNode temp=null;
            while(l1!=null && l1.val<=l2.val)
            {
                temp=l1;
                l1=l1.next;
            }
            temp.next=l2;

            ListNode temp2=l1;
            l1=l2;
            l2=temp2;
        }
        

        return res; 
    }
}


<----------------------------------------------------------------------------->
Extra Space 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode head=new ListNode(1);
        ListNode temp=head;
        if(list1==null)return list2;
        if(list2==null) return list1;
        while(list1!=null && list2!=null)
        {
            if(list1.val<=list2.val)
            {
                temp.next=list1;
                temp=temp.next;
                list1=list1.next;
            }
            else
            {
                temp.next=list2;
                temp=temp.next;
                list2=list2.next;
            }
        }
        while(list1!=null)
        {
            temp.next=list1;
            temp=temp.next;
            list1=list1.next;
        }
        while(list2!=null)
        {
            temp.next=list2;
            temp=temp.next;
            list2=list2.next;
        }
       return head.next; 
    }
}
