class Solution {
    public void swap(int i, int j, int[] nums)
    {
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
    public void nextPermutation(int[] nums) {
        int n=nums.length;
        int breakPoint=-1;
        for(int i=n-2;i>=0;i--)
        {
            if(nums[i]<nums[i+1]){
                breakPoint=i;
                break;
            }
        }
        // System.out.println(breakPoint);
        if(breakPoint==-1)
        {
            for(int i=0;i<n/2;i++)
            {
                swap(i,n-i-1,nums);
            }
        }
        else
        {
            int nextGreater=Integer.MAX_VALUE;
            int index=-1;
            for(int i=breakPoint+1;i<n;i++)
            {
                if(nums[i]<nextGreater && nums[i]>nums[breakPoint])
                {
                    nextGreater=nums[i];
                    index=i;
                }
            }
            // System.out.println(nextGreater);
            swap(breakPoint,index,nums);
            Arrays.sort(nums,breakPoint+1,n);
        }
    }
    public String getPermutation(int n, int k) {
        int[] nums=new int[n];
        for(int i=0;i<n;i++)
        {
            nums[i]=i+1;
        }
        for(int i=0;i<k-1;i++)
        {
            nextPermutation(nums);
        }
        return Arrays.toString(nums).substring(1,3*n-1).replaceAll(", ","");
        
    }
}
