class Solution {
    void swap(int[] nums,int i,int j){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
    void reverseArray(int[] nums,int start){
        int i=start;
        int j=nums.length-1;
        while(i<j){
            swap(nums,i,j);
            i++;
            j--;
        }
    }
    public void nextPermutation(int[] nums) {
        int dip=-1;
        int n=nums.length;
        for(int i=n-1;i>0;i--)
        {
            if(nums[i]>nums[i-1])
            {
                dip=i-1;
                break;
            }
        }
        
        if(dip==-1)
        {
            reverseArray(nums,0);
            return;
        }
        int max=dip;
        for(int i=nums.length-1;i>0;i--)
        {
            if(nums[i]>nums[dip])
            {
                max=i;
                break;
            }
        }
        int temp=nums[dip];
        nums[dip]=nums[max];
        nums[max]=temp;
        reverseArray(nums,dip+1);
    }
}

<------------------------------------------------------------------------------------------>
<----------------Another solution ---------------->
class Solution {
    public void nextPermutation(int[] nums) {
        int dip=-1;
        int n=nums.length;
        for(int i=n-1;i>0;i--)
        {
            if(nums[i]>nums[i-1])
            {
                dip=i-1;
                break;
            }
        }
        System.out.println(dip);
        if(dip==-1)
        {
            for(int i=0;i<n/2;i++)
            {
                int temp=nums[i];
                nums[i]=nums[n-i-1];
                nums[n-i-1]=temp;
                // nums[i]=nums[n-i-1];
            }
            // Arrays.sort(nums,Collections.reverseOrder());
            return;
        }
        int max=dip;
        for(int i=dip;i<nums.length;i++)
        {
            if(nums[i]>nums[dip])
            {
                max=i;
                if(nums[i]<nums[max])
                {
                    max=i;
                }
            }
        }
        int temp=nums[dip];
        nums[dip]=nums[max];
        nums[max]=temp;
        Arrays.sort(nums,dip+1,n);
        System.out.println(max);
    }
}
