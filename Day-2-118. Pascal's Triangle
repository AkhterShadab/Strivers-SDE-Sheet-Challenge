class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> res=new ArrayList<>();
        for(int i=1;i<=numRows;i++)
        {
            List<Integer> temp=new ArrayList<>();
            temp.add(1);
            for(int j=1;j<=i-2;j++)
            {
                int last=res.get(i-2).get(j);
                int sLast=res.get(i-2).get(j-1);
                temp.add(last+sLast);
            }
            if(i>1)temp.add(1);
            res.add(temp);
        }
        return res;
    }
}



#Another Approach is NcR Combination approach formula --
# Time Complexity - O(n*n)  
public static ArrayList<Long> generateRow(int row)
	{
		ArrayList<Long> res=new ArrayList<>();
		long ans=1;
		res.add(ans);
		for(int col=1;col<row;col++)
		{
			ans=ans*(row-col);
			ans/=col;
			res.add(ans);
		}
		return res;
	}
	public static ArrayList<ArrayList<Long>> printPascal(int n) {
                 // Write your code here.
				 ArrayList<ArrayList<Long>> res=new ArrayList<>();
				 for(int i=1;i<=n;i++)
				 {
					res.add(generateRow(i));	 
				 }
				 return res;
				 
				 
	}
